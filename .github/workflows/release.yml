name: Auto-Update Repository

on:
  push:
    branches:
      - main
    paths:
      - 'service.cloudsync/addon.xml'
      - 'addons.xml'

jobs:
  update_repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Extract version from addon.xml
      id: get_version
      run: |
        VERSION=$(grep -o 'version="[^"]*"' service.cloudsync/addon.xml | cut -d'"' -f2)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"

    - name: Create addon ZIP and MD5
      run: |
        cd service.cloudsync
        zip -r ../service.cloudsync-${{ steps.get_version.outputs.VERSION }}.zip . -x "*.pyc" "*/__pycache__/*"
        cd ..
        md5sum service.cloudsync-${{ steps.get_version.outputs.VERSION }}.zip > service.cloudsync-${{ steps.get_version.outputs.VERSION }}.zip.md5
        echo "Created service.cloudsync-${{ steps.get_version.outputs.VERSION }}.zip"

    - name: Update addons.xml.md5
      run: |
        md5sum addons.xml | cut -d' ' -f1 > addons.xml.md5.temp
        echo " *addons.xml" >> addons.xml.md5.temp
        mv addons.xml.md5.temp addons.xml.md5
        echo "Updated addons.xml.md5"

    - name: Update repository.cloudsync files
      run: |
        if [ -d "repository.cloudsync" ]; then
          cp addons.xml repository.cloudsync/addons.xml
          cp addons.xml.md5 repository.cloudsync/addons.xml.md5
          echo "Updated repository.cloudsync files"
        fi

    - name: Commit and push all changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add -A
        if ! git diff --staged --quiet; then
          git commit -m "Auto-update repository for v${{ steps.get_version.outputs.VERSION }}"
          git push
          echo "Repository updated for version ${{ steps.get_version.outputs.VERSION }}"
        else
          echo "No changes to commit"
        fi

